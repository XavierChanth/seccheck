#!/bin/bash
#
# Max number of affected @signs in chat
MAX="10"
ATSIGNS=""
FULL_PATH_TO_SCRIPT="$(realpath "$0")"
SCRIPT_DIRECTORY="$(dirname "$FULL_PATH_TO_SCRIPT")"
# URL of gChat webhook
# See https://developers.google.com/chat/how-tos/webhooks for more details
URL="<gChat webhook URL>"
# leave this many files in the logs directory
# Allows us to investigate and not max out the files
LEAVE="24"
# Get list of ports to test then test them..
PID=$$
DIR="/tmp/seccheck"
mkdir -p $DIR
LOG="$DIR/seccheck.${PID}.log"
LOGDC="$DIR/seccheck_dc.${PID}.log"
touch $LOG
for a in `docker service ls |grep secondary:prod |sed 's/.*\*://'|sed 's/->.*$//'`
do
$SCRIPT_DIRECTORY/checksecondary.expect $a >> $LOG
done
RESULTS="`wc -l $LOG |cut -d' ' -f1`"
# Lets double check we still have failures
# It's important to wait just a while as docker may have restarted a container
# Or Shepherd might be upgrading a container
if (( RESULTS > 0 ))
then
        sleep 10
        for PORT in `cat $LOG | awk '{print $NF}'`
                do
                        $SCRIPT_DIRECTORY/checksecondary.expect $PORT >> $LOGDC
                done
        RESULTS="`wc -l $LOGDC |cut -d' ' -f1`"
fi


if (( RESULTS > 0 ))
then
# Send results to gChat
curl --location --request POST ${URL} --header 'Content-Type: application/json' --data-raw "{\"text\": \"${RESULTS} Problematic Secondaries \"}"
        if (( RESULTS <= MAX ))
        then
                for PORT in `cat $LOGDC | awk '{print $NF}'`
                do
                        SECONDARY=$(docker service ls |grep "$PORT->$PORT/tcp" |awk '{print $2}')
                        ATSIGN=$(docker service inspect $SECONDARY --pretty | grep Args |awk '{print $3}')
                        ATSIGNS="$ATSIGN ($PORT), $ATSIGNS"
                done
                curl --location --request POST ${URL} --header 'Content-Type: application/json' --data-raw "{\"text\": \"Of the ${RESULTS} these are the first few effected @signs,  $ATSIGNS\"}"
        fi
fi
#
# Do some tidying up of logs files
COUNT=$(ls -1 $DIR | wc -l)
LEFT=$((COUNT - LEAVE))
[[ $LEFT < 0 ]] && LEFT=0
rm $(ls -td $DIR/* |tail -$LEFT)
